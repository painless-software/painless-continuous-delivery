[tox]
envlist = django{111,21,22}
skip_install = True
skipsdist = True

[testenv]
recreate = True
deps =
    autopep8
    django111: Django>=1.11,<2
    django21: Django>=2.1,<2.2
    django22: Django>=2.2,<3.0
    django-environ
    flake8-django
    pylint-django
commands =
    # NOTE: platform independent solution for `mkdir -p {toxworkdir}/{envname}/_`
    python -c "import os; os.mkdir('{toxworkdir}/{envname}/_')"
    django-admin startproject application {toxworkdir}/{envname}/_
    # TODO: Fix for non-Unices by using Python (OS X would need gsed)
    sed -i -E \
        -e '/^Generated by .django-admin startproject. using Django/d' \
        -e '/^For more information on this file, see/d' \
        -e '/^For the full list of settings and their values, see/d' \
        -e '/^https:..docs.djangoproject.com.en..*.settings/d' \
        -e '/^# Quick-start development settings - unsuitable for production/d' \
        -e '/^# https:..docs.djangoproject.com.en./d' \
        -e '/^# See https:..docs.djangoproject.com.en./d' \
        -e '/^# Build paths inside the project like this:/d' \
        -e 's/^import os/from os.path import abspath, dirname, join\nfrom environ import Env\n\nenv = Env()  # pylint: disable=invalid-name/' \
        -e 's/os.path.dirname.os.path.dirname.os.path.abspath.__file__.../dirname(dirname(abspath(__file__)))/' \
        -e 's/os.path.join./join(/g' \
        -e "s/^SECRET_KEY = .*$/DEBUG = env.bool('DJANGO_DEBUG', default=False)\n\nSECRET_KEY = 'dummy-secret' if DEBUG else env('DJANGO_SECRET_KEY')/" \
        -e "s/^(ALLOWED_HOSTS = ).*$/\1\['*'\]/" \
        -e "s#^STATIC_URL = .*$#STATIC_ROOT = join(BASE_DIR, 'static')\nSTATIC_URL = '/static/'\nMEDIA_ROOT = join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'#" \
        -e '/^DEBUG = True$/d' \
        -e '/^# SECURITY WARNING: /d' \
        {toxworkdir}/{envname}/_/application/settings.py
    sed -i -E -z \
        -e "s/\n(        )('NAME': 'django.contrib.auth.password_validation.)([A-Za-z]*',)/\n\1\2'\n\1\1'\3/g" \
        -e "s/(\nALLOWED_HOSTS = .....\n)/\1\nLOGGING = \{\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': \{\n        'console': \{\n            'level': env('DJANGO_LOG_LEVEL', default='INFO'),\n            'class': 'logging.StreamHandler',\n        \},\n    \},\n    'loggers': \{\n        'django': \{\n            'handlers': ['console'],\n        \},\n        'django.request': \{\n            'handlers': ['console'],\n            'level': 'ERROR',\n        \},\n    \},\n\}\n/" \
        {toxworkdir}/{envname}/_/application/settings.py
    # TODO: Add LANGUAGES = [('en', _('English')),] next to LANGUAGE_CODE = 'en'
    # TODO: Add LocaleMiddleware (between SessionMiddleware and CommonMiddleware)
    # TODO: Accomodate SITE_ID / django.contrib.sites or make it unneeded
    # TODO: ensure static and media folders exist and have proper permissions
    # TODO: Add Django default templates in application app (base, 400, 403, 440, 500)
    # TODO: Add minimal Hello World! app
    autopep8 --in-place {toxworkdir}/{envname}/_/application/settings.py
    flake8 {toxworkdir}/{envname}/_/
    pylint {toxworkdir}/{envname}/_/application --load-plugins=pylint_django
    sed -i -E -z \
        -e "s/(MIDDLEWARE = .)(\n    )/\1\2\{%- if cookiecutter.monitoring == 'Datadog' %\}\2'django_datadog.middleware.DatadogMiddleware',\2\{%- endif %\}\2/" \
        -e "s/(\n    )('django.contrib.staticfiles',)/\1\2\1\{%- if cookiecutter.monitoring == 'Datadog' %\}\1'django_datadog',\1\{%- endif %\}\1'django_probes',/" \
        -e "s#(DATABASES = .\n    'default':) .(\n        )'ENGINE': .* 'NAME': join.BASE_DIR, 'db.sqlite3'.,(\n    ).#\1 env.db(\2'DJANGO_DATABASE_URL',\2\{%- if cookiecutter.database == '(none)' %}\2default='sqlite://%s' % join(BASE_DIR, 'db.sqlite3')\2\{%- elif cookiecutter.database == 'Postgres' %\}\2default='postgres://postgres:postgres@database/postgres'\2\{%- elif cookiecutter.database == 'MySQL/MariaDB' %\}\2default='mysql://mysql:mysql@database/mysql'\2\{%- endif %\}\3),#" \
        -e "s/(\nenv = Env..[A-Za-z #:=-]*\n)/\1\{%- if cookiecutter.monitoring == 'Sentry' %\}\n\nSENTRY_DSN = env('SENTRY_DSN', default=None)\n\nif SENTRY_DSN:\n    import sentry_sdk\n\n    sentry_sdk.init(dsn=SENTRY_DSN, integrations=[\n        sentry_sdk.integrations.django.DjangoIntegration(),\n    ])\n\{%- endif %\}\n/" \
        {toxworkdir}/{envname}/_/application/settings.py
    sed -i -z \
        -e "s/$/\{%- if cookiecutter.monitoring == 'Datadog' %\}\n\nDATADOG_API_KEY = env('DATADOG_API_KEY', default=None)\nDATADOG_APP_KEY = env('DATADOG_APP_KEY', default=None)\nDATADOG_APP_NAME = env('DATADOG_APP_NAME', default=None)\n\{%- endif %\}\n/" \
        -e 's/\n\n\n\n"""\n\n/\n"""\n/g' \
        -e 's/\n\n\n/\n\n/g' \
        {toxworkdir}/{envname}/_/application/settings.py
whitelist_externals =
    sed
