# This file is a bash script. It is interpreted by direnv.
#
# Please install `direnv` with your favorite package manager (apt, homebrew,
# yum, ...) and follow the SETUP instructions in the direnv man page to
# activate this feature for your shell. https://direnv.net/#man/direnv.1

is_numeric() {
    [[ "$1" =~ ^-?[0-9]+$ ]]
}

user_exists() {
    id "$1" > /dev/null 2>&1
}

inside_docker-moduser() {
    usage() {
        echo "Set a new user id and group id for a user." \
             "Usage: ${FUNCNAME[1]} username"
        [[ "$1" != "" ]] && echo "- ERROR: $1"
        exit 1
    }

    USERNAME="$1"
    NEWUID=$(grep '^LOCAL_UID=' .env | sed 's/LOCAL_UID=//')
    NEWGID=$(grep '^LOCAL_GID=' .env | sed 's/LOCAL_GID=//')

    user_exists "$USERNAME" || usage "User does not exist: '$USERNAME'"
    is_numeric "$NEWUID" || usage "LOCAL_UID should be numeric: '$NEWUID'"
    is_numeric "$NEWGID" || usage "LOCAL_GID should be numeric: '$NEWGID'"

    GROUPNAME=$(id -gn $USERNAME)
    OLDUID=$(id -u $USERNAME)
    OLDGID=$(id -g $USERNAME)

    # inspired by https://muffinresearch.co.uk/linux-changing-uids-and-gids-for-user/
    if [[ "$NEWUID" != "$OLDUID" ]]; then
        echo "Replacing id for $USERNAME: $OLDUID:$OLDGID -> $NEWUID:$NEWGID ..."
        usermod -u $NEWUID $USERNAME
        groupmod -g $NEWGID $GROUPNAME
        find / -ignore_readdir_race -user $OLDUID -exec chown -h $NEWUID {} \;
        find / -ignore_readdir_race -group $OLDGID -exec chgrp -h $NEWGID {} \;
        usermod -g $NEWGID $USERNAME
        echo "Done. $(id $USERNAME)"
    fi
}

docker-dotenv() {
    touch .env
    sed -i '/^LOCAL_UID=/d' .env
    sed -i '/^LOCAL_GID=/d' .env
    echo "LOCAL_UID=$(id -u)" >> .env
    echo "LOCAL_GID=$(id -g)" >> .env
    cat .env
}

docker-alias() {
    ALIAS_COUNT=$(alias | grep "docker-compose run" | wc -l)
    alias | grep --color=never "docker-compose run" | sed 's/^alias/-/'

    if [[ $ALIAS_COUNT > 0 ]]; then
        echo $ALIAS_COUNT' aliases to make Docker painless. Remove them with `docker-unalias`.'
    else
        echo 'No aliases active for painless use of Docker.' \
             'Run `docker-setalias` to activate aliases.'
    fi
}

docker-setalias() {
    TOOL_SERVICES=$(grep -B1 -E '^\s+image: painless/.' docker-compose.override.yml | \
        sed -E '/^\s+image: painless/d' | sed -e 's/^\s+//' -e 's/:.*//' -e '/^--$/d')
    for CMD in $TOOL_SERVICES; do
        alias $CMD="docker-compose run --rm $CMD"
    done
    docker-alias
}

docker-unalias() {
    ALIAS_LIST=$(docker-alias | grep '^- ' | sed -e 's/- //' -e 's/=.*//')
    for LINE in $ALIAS_LIST; do
        unalias $LINE
        echo "$LINE alias removed."
    done
}

# ----------------------

if [ -f docker-compose.override.yml ]; then
    [ -f .env ] || docker-dotenv
    [ -f .dockerignore ] && docker-setalias
fi
