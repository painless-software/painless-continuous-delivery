kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: ENVIRONMENT
  required: true
- name: APP_NAMESPACE
  required: true
- name: APP_NAME
  value: example
  required: true
- name: APP_TAG
  required: true
- name: COMPONENT
  value: application
  required: true
- name: REGISTRY
  value: docker-registry.default.svc:5000
  required: true
- name: DJANGO_EMAIL_USER
  required: true
- name: DJANGO_EMAIL_PASSWORD
  required: true
- name: TLS_CERT
  required: true
- name: TLS_KEY
  required: true
- name: TLS_CA_CERT
  required: true

objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: ${COMPONENT}
    labels:
      app: ${APP_NAME}
      component: ${COMPONENT}
  spec:
    ports:
    - name: web
      port: 80
      targetPort: nginx
    selector:
      app: ${APP_NAME}
      component: ${COMPONENT}
    type: ClusterIP

- kind: Route
  apiVersion: v1
  metadata:
    annotations:
      kubernetes.io/tls-acme: 'true'
    name: ${COMPONENT}
    labels:
      app: ${APP_NAME}
      component: ${COMPONENT}
  spec:
    port:
      targetPort: web
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
      key: ${TLS_KEY}
      certificate: ${TLS_CERT}
      caCertificate: ${TLS_CA_CERT}
    to:
      kind: Service
      name: ${COMPONENT}

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${COMPONENT}
    labels:
      app: ${APP_NAME}
      component: ${COMPONENT}
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: ${APP_NAME}
        component: ${COMPONENT}
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          component: ${COMPONENT}
      spec:
        initContainers:
        - name: check-db-ready
          image: ${REGISTRY}/${APP_NAMESPACE}/${APP_NAME}:${APP_TAG}
          env:
          - name: DJANGO_DATABASE_URL
            valueFrom:
              secretKeyRef:
                key: database-url
                name: postgres
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret-key
                name: ${COMPONENT}
          command:
          - python manage.py wait_for_database
        containers:
        - name: django
          image: ${REGISTRY}/${APP_NAMESPACE}/${APP_NAME}:${APP_TAG}
          ports:
          - name: uwsgi
            containerPort: 8000
          env:
          - name: ENVIRONMENT
            value: ${ENVIRONMENT}
          - name: DJANGO_DATABASE_URL
            valueFrom:
              secretKeyRef:
                key: database-url
                name: postgres
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret-key
                name: ${COMPONENT}
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                key: sentry-dsn
                name: ${COMPONENT}
          - name: DJANGO_EMAIL_USER
            value: ${DJANGO_EMAIL_USER}
          - name: DJANGO_EMAIL_PASSWORD
            value: ${DJANGO_EMAIL_PASSWORD}
          livenessProbe:
            tcpSocket:
              port: uwsgi
            initialDelaySeconds: 13
          readinessProbe:
            tcpSocket:
              port: uwsgi
            initialDelaySeconds: 9
          resources:
            requests:
              cpu: 500m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 512Mi
        - name: nginx
          image: ${REGISTRY}/${APP_NAMESPACE}/${APP_NAME}:${APP_TAG}
          command:
          - nginx
          ports:
          - name: nginx
            containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: nginx
            initialDelaySeconds: 13
          readinessProbe:
            httpGet:
              path: /healthz
              port: nginx
            initialDelaySeconds: 9
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
            limits:
              cpu: 200m
              memory: 64Mi
        restartPolicy: Always
