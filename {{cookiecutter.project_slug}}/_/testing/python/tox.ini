[tox]
envlist = {{ cookiecutter.checks }}{% if cookiecutter.checks and cookiecutter.tests %},{% endif %}{{ cookiecutter.tests }}
skipsdist = true

[testenv]
deps =
    pytest
    -r {toxinidir}/requirements.txt
commands = pytest {posargs}
{%- if cookiecutter.framework == 'Django' %}
setenv =
    DJANGO_SECRET_KEY = testing
{%- endif %}

[testenv:flake8]
deps = flake8{% if cookiecutter.framework == 'Django' %}-django{% endif %}
commands = flake8 {posargs}

[testenv:pylint]
deps =
    {% if cookiecutter.framework == 'Django' %}pylint-django
    {%- else %}pylint
    {%- endif %}
    -r {toxinidir}/requirements.txt
commands = pylint --rcfile tox.ini {posargs:application}

[testenv:bandit]
deps = bandit<1.6.0
commands = bandit -r --ini tox.ini

[testenv:behave]
deps =
    behave
    -r {toxinidir}/requirements.txt
commands = behave {posargs}

[testenv:clean]
deps = pyclean
whitelist_externals =
    rm
commands =
    py3clean -v {toxinidir}
    rm -rf .cache/ .pytest_cache/ .tox/ tests/reports/

[testenv:requirements]
deps = pip-tools
commands = pip-compile --output-file=requirements/production.txt requirements/production.in --upgrade

[bandit]
exclude = .cache,.git,.tox,build,dist,docs,tests
targets = .

[behave]
# default_format = progress
default_tags = -@not_implemented -@xfail
junit = yes
junit_directory = tests/reports
paths = tests/acceptance
show_skipped = no
summary = no

[flake8]
exclude = .cache,.git,.tox,build

[pylint]
[MASTER]
{% if cookiecutter.framework == 'Django' -%}
load-plugins = pylint_django
{% endif -%}
output-format = colorized
reports = no

[pytest]
addopts =
    --strict
    --verbose
    --doctest-modules
    {%- if cookiecutter.framework == 'Django' %}
    --ignore=application/urls.py
    --ignore=application/wsgi.py
    {%- endif %}
    --ignore=tests/acceptance/steps
    --junitxml=tests/reports/unittests.xml
